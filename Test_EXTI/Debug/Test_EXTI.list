
Test_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ed0  08000ed0  00010ed8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed0  08000ed0  00010ed8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed0  08000ed8  00010ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000ed8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000ed8  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ed8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fca  00000000  00000000  00010f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004f2  00000000  00000000  00011ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  000123c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  000125c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000016f2  00000000  00000000  00012778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c7e  00000000  00000000  00013e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006267  00000000  00000000  00014ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ad4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000714  00000000  00000000  0001adcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000eb4 	.word	0x08000eb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000eb4 	.word	0x08000eb4

08000170 <RCC_u8EnPripheral>:
  	
}


u8 RCC_u8EnPripheral(u8 Copy_u8PrefralEN)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ST_ERROR =STD_TYPES_OK;
 800017a:	2301      	movs	r3, #1
 800017c:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PrefralEN<32)
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	2b1f      	cmp	r3, #31
 8000182:	d809      	bhi.n	8000198 <RCC_u8EnPripheral+0x28>
	{
		RCC_APB2EN_REG |= (1<<Copy_u8PrefralEN);
 8000184:	4b1c      	ldr	r3, [pc, #112]	; (80001f8 <RCC_u8EnPripheral+0x88>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	79fa      	ldrb	r2, [r7, #7]
 800018a:	2101      	movs	r1, #1
 800018c:	fa01 f202 	lsl.w	r2, r1, r2
 8000190:	4611      	mov	r1, r2
 8000192:	4a19      	ldr	r2, [pc, #100]	; (80001f8 <RCC_u8EnPripheral+0x88>)
 8000194:	430b      	orrs	r3, r1
 8000196:	6013      	str	r3, [r2, #0]
	}
	if(Copy_u8PrefralEN >= 32 && Copy_u8PrefralEN <64)
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	2b1f      	cmp	r3, #31
 800019c:	d90f      	bls.n	80001be <RCC_u8EnPripheral+0x4e>
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b3f      	cmp	r3, #63	; 0x3f
 80001a2:	d80c      	bhi.n	80001be <RCC_u8EnPripheral+0x4e>
	{
		Copy_u8PrefralEN  -=32;
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	3b20      	subs	r3, #32
 80001a8:	71fb      	strb	r3, [r7, #7]
		RCC_APB1EN_REG |=(1<<Copy_u8PrefralEN);
 80001aa:	4b14      	ldr	r3, [pc, #80]	; (80001fc <RCC_u8EnPripheral+0x8c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	79fa      	ldrb	r2, [r7, #7]
 80001b0:	2101      	movs	r1, #1
 80001b2:	fa01 f202 	lsl.w	r2, r1, r2
 80001b6:	4611      	mov	r1, r2
 80001b8:	4a10      	ldr	r2, [pc, #64]	; (80001fc <RCC_u8EnPripheral+0x8c>)
 80001ba:	430b      	orrs	r3, r1
 80001bc:	6013      	str	r3, [r2, #0]
	}
	if(Copy_u8PrefralEN >= 32 && Copy_u8PrefralEN <64)
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	2b1f      	cmp	r3, #31
 80001c2:	d910      	bls.n	80001e6 <RCC_u8EnPripheral+0x76>
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	2b3f      	cmp	r3, #63	; 0x3f
 80001c8:	d80d      	bhi.n	80001e6 <RCC_u8EnPripheral+0x76>
	{
		Copy_u8PrefralEN  -=64;
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	3b40      	subs	r3, #64	; 0x40
 80001ce:	71fb      	strb	r3, [r7, #7]
		RCC_AHPEN_REG |=(1<<Copy_u8PrefralEN);
 80001d0:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <RCC_u8EnPripheral+0x90>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	79fa      	ldrb	r2, [r7, #7]
 80001d6:	2101      	movs	r1, #1
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a08      	ldr	r2, [pc, #32]	; (8000200 <RCC_u8EnPripheral+0x90>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	6013      	str	r3, [r2, #0]
 80001e4:	e001      	b.n	80001ea <RCC_u8EnPripheral+0x7a>
	}
	else
	{
		Local_u8ST_ERROR = STD_TYPES_NOK;
 80001e6:	2300      	movs	r3, #0
 80001e8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ST_ERROR;
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40021018 	.word	0x40021018
 80001fc:	4002101c 	.word	0x4002101c
 8000200:	40021014 	.word	0x40021014

08000204 <EXTI_u8Init>:
#include "STM32f103XX.h"
#include "EXTI_interface.h"

static void(*pf[20])(void) = {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
u8 EXTI_u8Init(EXT_PIN_CONFIG *copy_pstr)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	u8 local_u8StateError = STD_TYPES_OK;
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8pinNUM = copy_pstr->PIN_E ;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	785b      	ldrb	r3, [r3, #1]
 8000214:	73bb      	strb	r3, [r7, #14]
	if(copy_pstr->PORT_E<=2  && copy_pstr->PIN_E <=15 && pf !=NULL )
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b02      	cmp	r3, #2
 800021c:	f200 816c 	bhi.w	80004f8 <EXTI_u8Init+0x2f4>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	785b      	ldrb	r3, [r3, #1]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	f200 8167 	bhi.w	80004f8 <EXTI_u8Init+0x2f4>
	{
    	if(copy_pstr->PIN_E <=3)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	2b03      	cmp	r3, #3
 8000230:	d852      	bhi.n	80002d8 <EXTI_u8Init+0xd4>
		{
		   if(copy_pstr->PORT_E == PORTA){
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d111      	bne.n	800025e <EXTI_u8Init+0x5a>
		  ALFIO->EXTI1 &=~ (0xf<<copy_pstr->PIN_E * 4); 	   
 800023a:	4b9e      	ldr	r3, [pc, #632]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	7852      	ldrb	r2, [r2, #1]
 8000242:	0092      	lsls	r2, r2, #2
 8000244:	210f      	movs	r1, #15
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	43d2      	mvns	r2, r2
 800024c:	4611      	mov	r1, r2
 800024e:	4a99      	ldr	r2, [pc, #612]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000250:	400b      	ands	r3, r1
 8000252:	6093      	str	r3, [r2, #8]
		  ALFIO-> EXTI1 |= (0x0<<(copy_pstr->PIN_E * 4));
 8000254:	4b97      	ldr	r3, [pc, #604]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000256:	4a97      	ldr	r2, [pc, #604]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	6093      	str	r3, [r2, #8]
    	if(copy_pstr->PIN_E <=3)
 800025c:	e14f      	b.n	80004fe <EXTI_u8Init+0x2fa>
		   }
		  else if(copy_pstr->PORT_E == PORTB){
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d119      	bne.n	800029a <EXTI_u8Init+0x96>
		  ALFIO->EXTI1 &=~ (0xf<<copy_pstr->PIN_E * 4); 	  
 8000266:	4b93      	ldr	r3, [pc, #588]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	7852      	ldrb	r2, [r2, #1]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	210f      	movs	r1, #15
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	43d2      	mvns	r2, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a8e      	ldr	r2, [pc, #568]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800027c:	400b      	ands	r3, r1
 800027e:	6093      	str	r3, [r2, #8]
		  ALFIO-> EXTI1 |= (0x1<<(copy_pstr->PIN_E * 4));
 8000280:	4b8c      	ldr	r3, [pc, #560]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	7852      	ldrb	r2, [r2, #1]
 8000288:	0092      	lsls	r2, r2, #2
 800028a:	2101      	movs	r1, #1
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a88      	ldr	r2, [pc, #544]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6093      	str	r3, [r2, #8]
    	if(copy_pstr->PIN_E <=3)
 8000298:	e131      	b.n	80004fe <EXTI_u8Init+0x2fa>
		   }
		  else if(copy_pstr->PORT_E == PORTC){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	f040 812d 	bne.w	80004fe <EXTI_u8Init+0x2fa>
		  ALFIO->EXTI1 &=~ (0xf<<copy_pstr->PIN_E * 4);	  
 80002a4:	4b83      	ldr	r3, [pc, #524]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	7852      	ldrb	r2, [r2, #1]
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	210f      	movs	r1, #15
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	4611      	mov	r1, r2
 80002b8:	4a7e      	ldr	r2, [pc, #504]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80002ba:	400b      	ands	r3, r1
 80002bc:	6093      	str	r3, [r2, #8]
		  ALFIO-> EXTI1 |= (0x2<<(copy_pstr->PIN_E * 4));
 80002be:	4b7d      	ldr	r3, [pc, #500]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	7852      	ldrb	r2, [r2, #1]
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	2102      	movs	r1, #2
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	4611      	mov	r1, r2
 80002d0:	4a78      	ldr	r2, [pc, #480]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80002d2:	430b      	orrs	r3, r1
 80002d4:	6093      	str	r3, [r2, #8]
    	if(copy_pstr->PIN_E <=3)
 80002d6:	e112      	b.n	80004fe <EXTI_u8Init+0x2fa>
		   }		   
		}
		else if(copy_pstr->PIN_E>3 && copy_pstr->PIN_E<=7)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	785b      	ldrb	r3, [r3, #1]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d954      	bls.n	800038a <EXTI_u8Init+0x186>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	785b      	ldrb	r3, [r3, #1]
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	d850      	bhi.n	800038a <EXTI_u8Init+0x186>
		{
			Local_u8pinNUM -=4;
 80002e8:	7bbb      	ldrb	r3, [r7, #14]
 80002ea:	3b04      	subs	r3, #4
 80002ec:	73bb      	strb	r3, [r7, #14]
		   if(copy_pstr->PORT_E == PORTA){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d110      	bne.n	8000318 <EXTI_u8Init+0x114>
		   ALFIO->EXTI2 &=~ (0xf<<Local_u8pinNUM * 4);
 80002f6:	4b6f      	ldr	r3, [pc, #444]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	7bba      	ldrb	r2, [r7, #14]
 80002fc:	0092      	lsls	r2, r2, #2
 80002fe:	210f      	movs	r1, #15
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	43d2      	mvns	r2, r2
 8000306:	4611      	mov	r1, r2
 8000308:	4a6a      	ldr	r2, [pc, #424]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800030a:	400b      	ands	r3, r1
 800030c:	60d3      	str	r3, [r2, #12]
		   ALFIO->EXTI2 |= (0x0<<(Local_u8pinNUM * 4));
 800030e:	4b69      	ldr	r3, [pc, #420]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000310:	4a68      	ldr	r2, [pc, #416]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	60d3      	str	r3, [r2, #12]
		   if(copy_pstr->PORT_E == PORTA){
 8000316:	e0eb      	b.n	80004f0 <EXTI_u8Init+0x2ec>
		   }
		   else if(copy_pstr->PORT_E == PORTB){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d117      	bne.n	8000350 <EXTI_u8Init+0x14c>
		   ALFIO->EXTI2 &=~ (0xf<<Local_u8pinNUM * 4);
 8000320:	4b64      	ldr	r3, [pc, #400]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	7bba      	ldrb	r2, [r7, #14]
 8000326:	0092      	lsls	r2, r2, #2
 8000328:	210f      	movs	r1, #15
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	43d2      	mvns	r2, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a60      	ldr	r2, [pc, #384]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000334:	400b      	ands	r3, r1
 8000336:	60d3      	str	r3, [r2, #12]
		   ALFIO->EXTI2 |=(0x1<<(Local_u8pinNUM * 4));
 8000338:	4b5e      	ldr	r3, [pc, #376]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	7bba      	ldrb	r2, [r7, #14]
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	4611      	mov	r1, r2
 8000348:	4a5a      	ldr	r2, [pc, #360]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800034a:	430b      	orrs	r3, r1
 800034c:	60d3      	str	r3, [r2, #12]
		   if(copy_pstr->PORT_E == PORTA){
 800034e:	e0cf      	b.n	80004f0 <EXTI_u8Init+0x2ec>
		   }
		   else if(copy_pstr->PORT_E == PORTC){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b02      	cmp	r3, #2
 8000356:	f040 80cb 	bne.w	80004f0 <EXTI_u8Init+0x2ec>
		   ALFIO->EXTI2 &=~ (0xf<<Local_u8pinNUM * 4);
 800035a:	4b56      	ldr	r3, [pc, #344]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	7bba      	ldrb	r2, [r7, #14]
 8000360:	0092      	lsls	r2, r2, #2
 8000362:	210f      	movs	r1, #15
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a51      	ldr	r2, [pc, #324]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800036e:	400b      	ands	r3, r1
 8000370:	60d3      	str	r3, [r2, #12]
		   ALFIO->EXTI2 |=(0x2<<(Local_u8pinNUM * 4));
 8000372:	4b50      	ldr	r3, [pc, #320]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	7bba      	ldrb	r2, [r7, #14]
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	2102      	movs	r1, #2
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a4c      	ldr	r2, [pc, #304]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000384:	430b      	orrs	r3, r1
 8000386:	60d3      	str	r3, [r2, #12]
		   if(copy_pstr->PORT_E == PORTA){
 8000388:	e0b2      	b.n	80004f0 <EXTI_u8Init+0x2ec>
		   }			
		}
		else if(copy_pstr->PIN_E>7 && copy_pstr->PIN_E<=11)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	785b      	ldrb	r3, [r3, #1]
 800038e:	2b07      	cmp	r3, #7
 8000390:	d953      	bls.n	800043a <EXTI_u8Init+0x236>
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	785b      	ldrb	r3, [r3, #1]
 8000396:	2b0b      	cmp	r3, #11
 8000398:	d84f      	bhi.n	800043a <EXTI_u8Init+0x236>
		{
			Local_u8pinNUM -=8;
 800039a:	7bbb      	ldrb	r3, [r7, #14]
 800039c:	3b08      	subs	r3, #8
 800039e:	73bb      	strb	r3, [r7, #14]
		   if(copy_pstr->PORT_E == PORTA){
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d110      	bne.n	80003ca <EXTI_u8Init+0x1c6>
		   ALFIO->EXTI3 &=~ (0xf<<Local_u8pinNUM * 4);
 80003a8:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003aa:	691b      	ldr	r3, [r3, #16]
 80003ac:	7bba      	ldrb	r2, [r7, #14]
 80003ae:	0092      	lsls	r2, r2, #2
 80003b0:	210f      	movs	r1, #15
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a3e      	ldr	r2, [pc, #248]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003bc:	400b      	ands	r3, r1
 80003be:	6113      	str	r3, [r2, #16]
		   ALFIO->EXTI3 |= (0x0<<(Local_u8pinNUM * 4));
 80003c0:	4b3c      	ldr	r3, [pc, #240]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003c2:	4a3c      	ldr	r2, [pc, #240]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	6113      	str	r3, [r2, #16]
		   if(copy_pstr->PORT_E == PORTA){
 80003c8:	e094      	b.n	80004f4 <EXTI_u8Init+0x2f0>
		   }
		   else if(copy_pstr->PORT_E == PORTB){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d117      	bne.n	8000402 <EXTI_u8Init+0x1fe>
          ALFIO->EXTI3 &=~ (0xf<<Local_u8pinNUM * 4);
 80003d2:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	7bba      	ldrb	r2, [r7, #14]
 80003d8:	0092      	lsls	r2, r2, #2
 80003da:	210f      	movs	r1, #15
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a33      	ldr	r2, [pc, #204]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003e6:	400b      	ands	r3, r1
 80003e8:	6113      	str	r3, [r2, #16]
		  ALFIO->EXTI3 |= (0x1<<(Local_u8pinNUM * 4));
 80003ea:	4b32      	ldr	r3, [pc, #200]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003ec:	691b      	ldr	r3, [r3, #16]
 80003ee:	7bba      	ldrb	r2, [r7, #14]
 80003f0:	0092      	lsls	r2, r2, #2
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	4611      	mov	r1, r2
 80003fa:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80003fc:	430b      	orrs	r3, r1
 80003fe:	6113      	str	r3, [r2, #16]
		   if(copy_pstr->PORT_E == PORTA){
 8000400:	e078      	b.n	80004f4 <EXTI_u8Init+0x2f0>
		   }
		   else if(copy_pstr->PORT_E == PORTC){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b02      	cmp	r3, #2
 8000408:	d174      	bne.n	80004f4 <EXTI_u8Init+0x2f0>
		   ALFIO->EXTI3 &=~ (0xf<<Local_u8pinNUM * 4);
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800040c:	691b      	ldr	r3, [r3, #16]
 800040e:	7bba      	ldrb	r2, [r7, #14]
 8000410:	0092      	lsls	r2, r2, #2
 8000412:	210f      	movs	r1, #15
 8000414:	fa01 f202 	lsl.w	r2, r1, r2
 8000418:	43d2      	mvns	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800041e:	400b      	ands	r3, r1
 8000420:	6113      	str	r3, [r2, #16]
		   ALFIO->EXTI3 |= (0x2<<(Local_u8pinNUM * 4));
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000424:	691b      	ldr	r3, [r3, #16]
 8000426:	7bba      	ldrb	r2, [r7, #14]
 8000428:	0092      	lsls	r2, r2, #2
 800042a:	2102      	movs	r1, #2
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	4611      	mov	r1, r2
 8000432:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6113      	str	r3, [r2, #16]
		   if(copy_pstr->PORT_E == PORTA){
 8000438:	e05c      	b.n	80004f4 <EXTI_u8Init+0x2f0>
		   }			
		}		
		else if(copy_pstr->PIN_E>11 && copy_pstr->PIN_E<=15)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	2b0b      	cmp	r3, #11
 8000440:	d95d      	bls.n	80004fe <EXTI_u8Init+0x2fa>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	785b      	ldrb	r3, [r3, #1]
 8000446:	2b0f      	cmp	r3, #15
 8000448:	d859      	bhi.n	80004fe <EXTI_u8Init+0x2fa>
		{
			Local_u8pinNUM -=12;
 800044a:	7bbb      	ldrb	r3, [r7, #14]
 800044c:	3b0c      	subs	r3, #12
 800044e:	73bb      	strb	r3, [r7, #14]
		   if(copy_pstr->PORT_E == PORTA){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d110      	bne.n	800047a <EXTI_u8Init+0x276>
		   ALFIO->EXTI4 &=~ (0xf<<Local_u8pinNUM * 4);
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	7bba      	ldrb	r2, [r7, #14]
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	210f      	movs	r1, #15
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	43d2      	mvns	r2, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800046c:	400b      	ands	r3, r1
 800046e:	6153      	str	r3, [r2, #20]
		   ALFIO->EXTI4 |= (0x0<<(Local_u8pinNUM * 4));
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	6153      	str	r3, [r2, #20]
    	if(copy_pstr->PIN_E <=3)
 8000478:	e041      	b.n	80004fe <EXTI_u8Init+0x2fa>
		   }
		  else if(copy_pstr->PORT_E == PORTB){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d11a      	bne.n	80004b8 <EXTI_u8Init+0x2b4>
		   ALFIO->EXTI4 &=~ (0xf<<Local_u8pinNUM * 4);
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	7bba      	ldrb	r2, [r7, #14]
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	210f      	movs	r1, #15
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <EXTI_u8Init+0x2b0>)
 8000496:	400b      	ands	r3, r1
 8000498:	6153      	str	r3, [r2, #20]
		   ALFIO-> EXTI4 |= (0x1<<(Local_u8pinNUM * 4));
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <EXTI_u8Init+0x2b0>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	7bba      	ldrb	r2, [r7, #14]
 80004a0:	0092      	lsls	r2, r2, #2
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a02      	ldr	r2, [pc, #8]	; (80004b4 <EXTI_u8Init+0x2b0>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6153      	str	r3, [r2, #20]
    	if(copy_pstr->PIN_E <=3)
 80004b0:	e025      	b.n	80004fe <EXTI_u8Init+0x2fa>
 80004b2:	bf00      	nop
 80004b4:	40010000 	.word	0x40010000
		   }
		  else if(copy_pstr->PORT_E == PORTC){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d11e      	bne.n	80004fe <EXTI_u8Init+0x2fa>
		   ALFIO->EXTI4 &=~ (0xf<<Local_u8pinNUM * 4);
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <EXTI_u8Init+0x308>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	7bba      	ldrb	r2, [r7, #14]
 80004c6:	0092      	lsls	r2, r2, #2
 80004c8:	210f      	movs	r1, #15
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	43d2      	mvns	r2, r2
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <EXTI_u8Init+0x308>)
 80004d4:	400b      	ands	r3, r1
 80004d6:	6153      	str	r3, [r2, #20]
		   ALFIO->EXTI4 |= (0x2<<(Local_u8pinNUM * 4));
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <EXTI_u8Init+0x308>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	7bba      	ldrb	r2, [r7, #14]
 80004de:	0092      	lsls	r2, r2, #2
 80004e0:	2102      	movs	r1, #2
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <EXTI_u8Init+0x308>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	6153      	str	r3, [r2, #20]
    	if(copy_pstr->PIN_E <=3)
 80004ee:	e006      	b.n	80004fe <EXTI_u8Init+0x2fa>
		   if(copy_pstr->PORT_E == PORTA){
 80004f0:	bf00      	nop
 80004f2:	e004      	b.n	80004fe <EXTI_u8Init+0x2fa>
		   if(copy_pstr->PORT_E == PORTA){
 80004f4:	bf00      	nop
    	if(copy_pstr->PIN_E <=3)
 80004f6:	e002      	b.n	80004fe <EXTI_u8Init+0x2fa>
		}

	}
	else
	{
	local_u8StateError = STD_TYPES_NOK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e000      	b.n	8000500 <EXTI_u8Init+0x2fc>
    	if(copy_pstr->PIN_E <=3)
 80004fe:	bf00      	nop
	}		
	return local_u8StateError;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40010000 	.word	0x40010000

08000510 <EXTI_u8Enable>:

u8 EXTI_u8Enable(u8 copy_u8exti,u8 copy_u8TriggerStaet)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	460a      	mov	r2, r1
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
	u8 local_u8StateError = STD_TYPES_OK;
 8000520:	2301      	movs	r3, #1
 8000522:	73fb      	strb	r3, [r7, #15]
	if(copy_u8exti<=EXTI19_U8_PRIF)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b13      	cmp	r3, #19
 8000528:	d843      	bhi.n	80005b2 <EXTI_u8Enable+0xa2>
	{
	  EXTI->IMR |= (1<<copy_u8exti)	;
 800052a:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <EXTI_u8Enable+0xb4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <EXTI_u8Enable+0xb4>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6013      	str	r3, [r2, #0]
	  if(copy_u8TriggerStaet == EN_RISING_TRIGGER)
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10a      	bne.n	800055a <EXTI_u8Enable+0x4a>
      {
        EXTI->PTSR |=(1<<copy_u8exti);
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <EXTI_u8Enable+0xb4>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	2101      	movs	r1, #1
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <EXTI_u8Enable+0xb4>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
 8000558:	e02d      	b.n	80005b6 <EXTI_u8Enable+0xa6>
	  }
	  else if(copy_u8TriggerStaet == DE_RISING_TRIGGER)
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d10b      	bne.n	8000578 <EXTI_u8Enable+0x68>
      {
        EXTI->PTSR &=~ (1<<copy_u8exti);
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <EXTI_u8Enable+0xb4>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	2101      	movs	r1, #1
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	43d2      	mvns	r2, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <EXTI_u8Enable+0xb4>)
 8000572:	400b      	ands	r3, r1
 8000574:	6093      	str	r3, [r2, #8]
 8000576:	e01e      	b.n	80005b6 <EXTI_u8Enable+0xa6>
	  }

	  else if(copy_u8TriggerStaet == EN_FALLING_TRIGGER)
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d10a      	bne.n	8000594 <EXTI_u8Enable+0x84>
      {
        EXTI->FTSR |=(1<<copy_u8exti);
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <EXTI_u8Enable+0xb4>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <EXTI_u8Enable+0xb4>)
 800058e:	430b      	orrs	r3, r1
 8000590:	60d3      	str	r3, [r2, #12]
 8000592:	e010      	b.n	80005b6 <EXTI_u8Enable+0xa6>
	  }
	  else if(copy_u8TriggerStaet == DE_FALLING_TRIGGER)
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d10d      	bne.n	80005b6 <EXTI_u8Enable+0xa6>
      {
        EXTI->FTSR &=~(1<<copy_u8exti);
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <EXTI_u8Enable+0xb4>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <EXTI_u8Enable+0xb4>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e001      	b.n	80005b6 <EXTI_u8Enable+0xa6>
	  } 
	}
		else
	{
	local_u8StateError = STD_TYPES_NOK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
	}		
	return local_u8StateError;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40010400 	.word	0x40010400

080005c8 <EXTI_voidCallBackFunEXTI0>:
	return local_u8StateError;	
	
}

u8 EXTI_voidCallBackFunEXTI0(void(*fun)(void))
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	u8 local_stateError = STD_TYPES_OK;
 80005d0:	2301      	movs	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
	if(fun !=NULL)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <EXTI_voidCallBackFunEXTI0+0x1a>
	{
  	pf[0] = fun;
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <EXTI_voidCallBackFunEXTI0+0x2c>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	e001      	b.n	80005e6 <EXTI_voidCallBackFunEXTI0+0x1e>
	}
	else
	{
		local_stateError = STD_TYPES_NOK;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
	}
	  return  local_stateError;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2000001c 	.word	0x2000001c

080005f8 <EXTI0_IRQHandler>:
	}
  return  local_stateError;
}

void EXTI0_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if(pf[0]!=NULL)
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <EXTI0_IRQHandler+0x24>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <EXTI0_IRQHandler+0x1e>
	{
	  EXTI->PR |=(1<<0);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <EXTI0_IRQHandler+0x28>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <EXTI0_IRQHandler+0x28>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6153      	str	r3, [r2, #20]
	  pf[0]();
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <EXTI0_IRQHandler+0x24>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4798      	blx	r3
	}

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000001c 	.word	0x2000001c
 8000620:	40010400 	.word	0x40010400

08000624 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	if(pf[1]!=NULL)
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <EXTI1_IRQHandler+0x24>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d008      	beq.n	8000642 <EXTI1_IRQHandler+0x1e>
	{
	  EXTI->PR |=(1<<1);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <EXTI1_IRQHandler+0x28>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a05      	ldr	r2, [pc, #20]	; (800064c <EXTI1_IRQHandler+0x28>)
 8000636:	f043 0302 	orr.w	r3, r3, #2
 800063a:	6153      	str	r3, [r2, #20]
	  pf[1]();
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <EXTI1_IRQHandler+0x24>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4798      	blx	r3
	}

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000001c 	.word	0x2000001c
 800064c:	40010400 	.word	0x40010400

08000650 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	if(pf[2]!=NULL)
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <EXTI2_IRQHandler+0x24>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <EXTI2_IRQHandler+0x1e>
	{
	  EXTI->PR |=(1<<2);
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <EXTI2_IRQHandler+0x28>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <EXTI2_IRQHandler+0x28>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6153      	str	r3, [r2, #20]
	  pf[2]();
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <EXTI2_IRQHandler+0x24>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	4798      	blx	r3
	}

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000001c 	.word	0x2000001c
 8000678:	40010400 	.word	0x40010400

0800067c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	if(pf[3]!=NULL)
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <EXTI3_IRQHandler+0x24>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d008      	beq.n	800069a <EXTI3_IRQHandler+0x1e>
	{
	  EXTI->PR |=(1<<3);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <EXTI3_IRQHandler+0x28>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <EXTI3_IRQHandler+0x28>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6153      	str	r3, [r2, #20]
	  pf[3]();
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <EXTI3_IRQHandler+0x24>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4798      	blx	r3
	}

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000001c 	.word	0x2000001c
 80006a4:	40010400 	.word	0x40010400

080006a8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if(pf[4]!=NULL)
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <EXTI4_IRQHandler+0x24>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <EXTI4_IRQHandler+0x1e>
	{
	  EXTI->PR |=(1<<4);
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <EXTI4_IRQHandler+0x28>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <EXTI4_IRQHandler+0x28>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6153      	str	r3, [r2, #20]
	  pf[4]();
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <EXTI4_IRQHandler+0x24>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4798      	blx	r3
	}

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000001c 	.word	0x2000001c
 80006d0:	40010400 	.word	0x40010400

080006d4 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	if(((EXTI->SWIER>>5)&1) == 1)
 80006d8:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	095b      	lsrs	r3, r3, #5
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d10c      	bne.n	8000700 <EXTI9_5_IRQHandler+0x2c>
	{
		if(pf[5]!=NULL)
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <EXTI9_5_IRQHandler+0x2c>
		{
		  EXTI->PR |=(1<<5);
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	6153      	str	r3, [r2, #20]
		  pf[5]();
 80006fa:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>6)&1) == 1)
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	099b      	lsrs	r3, r3, #6
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10c      	bne.n	8000728 <EXTI9_5_IRQHandler+0x54>
	{
		if(pf[6]!=NULL)
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d008      	beq.n	8000728 <EXTI9_5_IRQHandler+0x54>
		{
		  EXTI->PR |=(1<<6);
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6153      	str	r3, [r2, #20]
		  pf[6]();
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>7)&1) == 1)
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	09db      	lsrs	r3, r3, #7
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	2b01      	cmp	r3, #1
 8000734:	d10c      	bne.n	8000750 <EXTI9_5_IRQHandler+0x7c>
	{
		if(pf[7]!=NULL)
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d008      	beq.n	8000750 <EXTI9_5_IRQHandler+0x7c>
		{
		  EXTI->PR |=(1<<7);
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6153      	str	r3, [r2, #20]
		  pf[7]();
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>8)&1) == 1)
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	2b01      	cmp	r3, #1
 800075c:	d10c      	bne.n	8000778 <EXTI9_5_IRQHandler+0xa4>
	{
		if(pf[8]!=NULL)
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d008      	beq.n	8000778 <EXTI9_5_IRQHandler+0xa4>
		{
		  EXTI->PR |=(1<<8);
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 800076c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000770:	6153      	str	r3, [r2, #20]
		  pf[8]();
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>9)&1) == 1)
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	0a5b      	lsrs	r3, r3, #9
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10c      	bne.n	80007a0 <EXTI9_5_IRQHandler+0xcc>
	{
		if(pf[9]!=NULL)
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <EXTI9_5_IRQHandler+0xcc>
		{
		  EXTI->PR |=(1<<9);
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <EXTI9_5_IRQHandler+0xd0>)
 8000794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000798:	6153      	str	r3, [r2, #20]
		  pf[9]();
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <EXTI9_5_IRQHandler+0xd4>)
 800079c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079e:	4798      	blx	r3
		}
	}
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010400 	.word	0x40010400
 80007a8:	2000001c 	.word	0x2000001c

080007ac <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	if(((EXTI->SWIER>>10)&1) == 1)
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	0a9b      	lsrs	r3, r3, #10
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d10c      	bne.n	80007d8 <EXTI15_10_IRQHandler+0x2c>
	{
		if(pf[10]!=NULL)
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 80007c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d008      	beq.n	80007d8 <EXTI15_10_IRQHandler+0x2c>
		{
		  EXTI->PR |=(1<<10);
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a36      	ldr	r2, [pc, #216]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 80007cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007d0:	6153      	str	r3, [r2, #20]
		  pf[10]();
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 80007d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d6:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>11)&1) == 1)
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	0adb      	lsrs	r3, r3, #11
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d10c      	bne.n	8000800 <EXTI15_10_IRQHandler+0x54>
	{
		if(pf[11]!=NULL)
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d008      	beq.n	8000800 <EXTI15_10_IRQHandler+0x54>
		{
		  EXTI->PR |=(1<<11);
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 80007f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f8:	6153      	str	r3, [r2, #20]
		  pf[11]();
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>12)&1) == 1)
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	0b1b      	lsrs	r3, r3, #12
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	2b01      	cmp	r3, #1
 800080c:	d10c      	bne.n	8000828 <EXTI15_10_IRQHandler+0x7c>
	{
		if(pf[12]!=NULL)
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	2b00      	cmp	r3, #0
 8000814:	d008      	beq.n	8000828 <EXTI15_10_IRQHandler+0x7c>
		{
		  EXTI->PR |=(1<<12);
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 800081c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000820:	6153      	str	r3, [r2, #20]
		  pf[12]();
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>13)&1) == 1)
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	0b5b      	lsrs	r3, r3, #13
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10c      	bne.n	8000850 <EXTI15_10_IRQHandler+0xa4>
	{
		if(pf[13]!=NULL)
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 8000838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083a:	2b00      	cmp	r3, #0
 800083c:	d008      	beq.n	8000850 <EXTI15_10_IRQHandler+0xa4>
		{
		  EXTI->PR |=(1<<13);
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000844:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000848:	6153      	str	r3, [r2, #20]
		  pf[13]();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084e:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>14)&1) == 1)
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	0b9b      	lsrs	r3, r3, #14
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b01      	cmp	r3, #1
 800085c:	d10c      	bne.n	8000878 <EXTI15_10_IRQHandler+0xcc>
	{
		if(pf[14]!=NULL)
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 8000860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000862:	2b00      	cmp	r3, #0
 8000864:	d008      	beq.n	8000878 <EXTI15_10_IRQHandler+0xcc>
		{
		  EXTI->PR |=(1<<14);
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6153      	str	r3, [r2, #20]
		  pf[14]();
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 8000874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000876:	4798      	blx	r3
		}
	}
	if(((EXTI->SWIER>>15)&1) == 1)
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	0bdb      	lsrs	r3, r3, #15
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b01      	cmp	r3, #1
 8000884:	d10c      	bne.n	80008a0 <EXTI15_10_IRQHandler+0xf4>
	{
		if(pf[15]!=NULL)
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 8000888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088a:	2b00      	cmp	r3, #0
 800088c:	d008      	beq.n	80008a0 <EXTI15_10_IRQHandler+0xf4>
		{
		  EXTI->PR |=(1<<15);
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <EXTI15_10_IRQHandler+0xf8>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000898:	6153      	str	r3, [r2, #20]
		  pf[15]();
 800089a:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <EXTI15_10_IRQHandler+0xfc>)
 800089c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800089e:	4798      	blx	r3
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010400 	.word	0x40010400
 80008a8:	2000001c 	.word	0x2000001c

080008ac <GPIO_voidInit>:
#include "GPIO_interface.h"
#include "GPIO_config.h" 


u8   GPIO_voidInit(PIN_CINFIG *Copy_strPinConfig)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	u8 local_statError =STD_TYPES_OK;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
    if((Copy_strPinConfig->copy_u8port <=GPIOC_U8_PORT) && (Copy_strPinConfig->copy_u8pinNum <= GPIO_U8_PIN15) && (Copy_strPinConfig->copy_PinMode<=0xf))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	f200 8186 	bhi.w	8000bce <GPIO_voidInit+0x322>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	f200 8181 	bhi.w	8000bce <GPIO_voidInit+0x322>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	f200 817c 	bhi.w	8000bce <GPIO_voidInit+0x322>
  	{
    if(Copy_strPinConfig->copy_u8pinNum<=GPIO_U8_PIN7)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	f200 80aa 	bhi.w	8000a34 <GPIO_voidInit+0x188>
	{
	  if(Copy_strPinConfig->copy_u8port ==GPIOA_U8_PORT)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d133      	bne.n	8000950 <GPIO_voidInit+0xa4>
	  {
		  GPIOA_U32_CRL_REG &=~ (0xf<<(Copy_strPinConfig->copy_u8pinNum)*4);
 80008e8:	4b8a      	ldr	r3, [pc, #552]	; (8000b14 <GPIO_voidInit+0x268>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	7852      	ldrb	r2, [r2, #1]
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	210f      	movs	r1, #15
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a85      	ldr	r2, [pc, #532]	; (8000b14 <GPIO_voidInit+0x268>)
 80008fe:	400b      	ands	r3, r1
 8000900:	6013      	str	r3, [r2, #0]
		  if(Copy_strPinConfig->copy_PinMode == GPIO_U8_INPUT_PULLUP)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	2b0c      	cmp	r3, #12
 8000908:	d114      	bne.n	8000934 <GPIO_voidInit+0x88>
		  {
			GPIOA_U32_CRL_REG |=(0x8<<(Copy_strPinConfig->copy_u8pinNum)*4);
 800090a:	4b82      	ldr	r3, [pc, #520]	; (8000b14 <GPIO_voidInit+0x268>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	7852      	ldrb	r2, [r2, #1]
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	2108      	movs	r1, #8
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4a7d      	ldr	r2, [pc, #500]	; (8000b14 <GPIO_voidInit+0x268>)
 800091e:	430b      	orrs	r3, r1
 8000920:	6013      	str	r3, [r2, #0]
            GPIOA_U32_BSRR_REG =(1<<Copy_strPinConfig->copy_u8pinNum); 			
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	461a      	mov	r2, r3
 8000928:	2301      	movs	r3, #1
 800092a:	fa03 f202 	lsl.w	r2, r3, r2
 800092e:	4b7a      	ldr	r3, [pc, #488]	; (8000b18 <GPIO_voidInit+0x26c>)
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e00d      	b.n	8000950 <GPIO_voidInit+0xa4>
		  }
		  else
		  {

			 GPIOA_U32_CRL_REG |=((Copy_strPinConfig->copy_PinMode)<<(Copy_strPinConfig->copy_u8pinNum)*4); 
 8000934:	4b77      	ldr	r3, [pc, #476]	; (8000b14 <GPIO_voidInit+0x268>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	7892      	ldrb	r2, [r2, #2]
 800093c:	4611      	mov	r1, r2
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	7852      	ldrb	r2, [r2, #1]
 8000942:	0092      	lsls	r2, r2, #2
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a72      	ldr	r2, [pc, #456]	; (8000b14 <GPIO_voidInit+0x268>)
 800094c:	430b      	orrs	r3, r1
 800094e:	6013      	str	r3, [r2, #0]
		  }
	
	  }
	  if(Copy_strPinConfig->copy_u8port ==GPIOB_U8_PORT)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d133      	bne.n	80009c0 <GPIO_voidInit+0x114>
	  {
		  GPIOB_U32_CRL_REG &=~ (0xf<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000958:	4b70      	ldr	r3, [pc, #448]	; (8000b1c <GPIO_voidInit+0x270>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	7852      	ldrb	r2, [r2, #1]
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	210f      	movs	r1, #15
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	43d2      	mvns	r2, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a6b      	ldr	r2, [pc, #428]	; (8000b1c <GPIO_voidInit+0x270>)
 800096e:	400b      	ands	r3, r1
 8000970:	6013      	str	r3, [r2, #0]
		  if(Copy_strPinConfig->copy_PinMode == GPIO_U8_INPUT_PULLUP)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	789b      	ldrb	r3, [r3, #2]
 8000976:	2b0c      	cmp	r3, #12
 8000978:	d114      	bne.n	80009a4 <GPIO_voidInit+0xf8>
		  {
			GPIOB_U32_CRL_REG |=(0x8<<(Copy_strPinConfig->copy_u8pinNum)*4);
 800097a:	4b68      	ldr	r3, [pc, #416]	; (8000b1c <GPIO_voidInit+0x270>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	7852      	ldrb	r2, [r2, #1]
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	2108      	movs	r1, #8
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4a63      	ldr	r2, [pc, #396]	; (8000b1c <GPIO_voidInit+0x270>)
 800098e:	430b      	orrs	r3, r1
 8000990:	6013      	str	r3, [r2, #0]
            GPIOB_U32_BSRR_REG =(1<<Copy_strPinConfig->copy_u8pinNum); 			
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	461a      	mov	r2, r3
 8000998:	2301      	movs	r3, #1
 800099a:	fa03 f202 	lsl.w	r2, r3, r2
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <GPIO_voidInit+0x274>)
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e00d      	b.n	80009c0 <GPIO_voidInit+0x114>
		  }
		  else
		  {
			 GPIOB_U32_CRL_REG |=((Copy_strPinConfig->copy_PinMode)<<(Copy_strPinConfig->copy_u8pinNum)*4); 
 80009a4:	4b5d      	ldr	r3, [pc, #372]	; (8000b1c <GPIO_voidInit+0x270>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	7892      	ldrb	r2, [r2, #2]
 80009ac:	4611      	mov	r1, r2
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	7852      	ldrb	r2, [r2, #1]
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a58      	ldr	r2, [pc, #352]	; (8000b1c <GPIO_voidInit+0x270>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	6013      	str	r3, [r2, #0]
		  }
	
	  }
	  if(Copy_strPinConfig->copy_u8port ==GPIOC_U8_PORT)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	f040 8105 	bne.w	8000bd4 <GPIO_voidInit+0x328>
	  {
		  GPIOC_U32_CRL_REG &=~ (0xf<<(Copy_strPinConfig->copy_u8pinNum)*4);
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <GPIO_voidInit+0x278>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	7852      	ldrb	r2, [r2, #1]
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	210f      	movs	r1, #15
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	43d2      	mvns	r2, r2
 80009dc:	4611      	mov	r1, r2
 80009de:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <GPIO_voidInit+0x278>)
 80009e0:	400b      	ands	r3, r1
 80009e2:	6013      	str	r3, [r2, #0]
		  if(Copy_strPinConfig->copy_PinMode == GPIO_U8_INPUT_PULLUP)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	2b0c      	cmp	r3, #12
 80009ea:	d114      	bne.n	8000a16 <GPIO_voidInit+0x16a>
		  {
			GPIOC_U32_CRL_REG |=(0x8<<(Copy_strPinConfig->copy_u8pinNum)*4);
 80009ec:	4b4d      	ldr	r3, [pc, #308]	; (8000b24 <GPIO_voidInit+0x278>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	7852      	ldrb	r2, [r2, #1]
 80009f4:	0092      	lsls	r2, r2, #2
 80009f6:	2108      	movs	r1, #8
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <GPIO_voidInit+0x278>)
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6013      	str	r3, [r2, #0]
            GPIOC_U32_BSRR_REG =(1<<Copy_strPinConfig->copy_u8pinNum); 			
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	785b      	ldrb	r3, [r3, #1]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	fa03 f202 	lsl.w	r2, r3, r2
 8000a10:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <GPIO_voidInit+0x27c>)
 8000a12:	601a      	str	r2, [r3, #0]
    if(Copy_strPinConfig->copy_u8pinNum<=GPIO_U8_PIN7)
 8000a14:	e0de      	b.n	8000bd4 <GPIO_voidInit+0x328>
		  }
		  else
		  {
			 GPIOC_U32_CRL_REG |=((Copy_strPinConfig->copy_PinMode)<<(Copy_strPinConfig->copy_u8pinNum)*4); 
 8000a16:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <GPIO_voidInit+0x278>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	7892      	ldrb	r2, [r2, #2]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	7852      	ldrb	r2, [r2, #1]
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4a3d      	ldr	r2, [pc, #244]	; (8000b24 <GPIO_voidInit+0x278>)
 8000a2e:	430b      	orrs	r3, r1
 8000a30:	6013      	str	r3, [r2, #0]
    if(Copy_strPinConfig->copy_u8pinNum<=GPIO_U8_PIN7)
 8000a32:	e0cf      	b.n	8000bd4 <GPIO_voidInit+0x328>
	
	  }
	}
    else
    {
    	Copy_strPinConfig->copy_u8pinNum  -= 8;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	3b08      	subs	r3, #8
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	705a      	strb	r2, [r3, #1]
		if(Copy_strPinConfig->copy_u8port ==GPIOA_U8_PORT)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d139      	bne.n	8000abc <GPIO_voidInit+0x210>
	    {
	   	GPIOA_U32_CRH_REG &=~ (0xf<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <GPIO_voidInit+0x280>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	7852      	ldrb	r2, [r2, #1]
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	210f      	movs	r1, #15
 8000a54:	fa01 f202 	lsl.w	r2, r1, r2
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a33      	ldr	r2, [pc, #204]	; (8000b2c <GPIO_voidInit+0x280>)
 8000a5e:	400b      	ands	r3, r1
 8000a60:	6013      	str	r3, [r2, #0]
		  if(Copy_strPinConfig->copy_PinMode == GPIO_U8_INPUT_PULLUP)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	789b      	ldrb	r3, [r3, #2]
 8000a66:	2b0c      	cmp	r3, #12
 8000a68:	d11a      	bne.n	8000aa0 <GPIO_voidInit+0x1f4>
		  {
			GPIOA_U32_CRH_REG |=(0x8<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <GPIO_voidInit+0x280>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	7852      	ldrb	r2, [r2, #1]
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	2108      	movs	r1, #8
 8000a76:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <GPIO_voidInit+0x280>)
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
			Copy_strPinConfig->copy_u8pinNum  += 8;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	3308      	adds	r3, #8
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	705a      	strb	r2, [r3, #1]
            GPIOA_U32_BSRR_REG =(1<<Copy_strPinConfig->copy_u8pinNum); 			
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	461a      	mov	r2, r3
 8000a94:	2301      	movs	r3, #1
 8000a96:	fa03 f202 	lsl.w	r2, r3, r2
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <GPIO_voidInit+0x26c>)
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e00d      	b.n	8000abc <GPIO_voidInit+0x210>
		  }
		  else
		  {
			 GPIOA_U32_CRH_REG |=((Copy_strPinConfig->copy_PinMode)<<(Copy_strPinConfig->copy_u8pinNum)*4); 
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <GPIO_voidInit+0x280>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	7892      	ldrb	r2, [r2, #2]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7852      	ldrb	r2, [r2, #1]
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <GPIO_voidInit+0x280>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
		  }
	
	  }
	  if(Copy_strPinConfig->copy_u8port ==GPIOB_U8_PORT)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d145      	bne.n	8000b50 <GPIO_voidInit+0x2a4>
	  {
		  GPIOB_U32_CRH_REG &=~ (0xf<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <GPIO_voidInit+0x284>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	7852      	ldrb	r2, [r2, #1]
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	210f      	movs	r1, #15
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <GPIO_voidInit+0x284>)
 8000ada:	400b      	ands	r3, r1
 8000adc:	6013      	str	r3, [r2, #0]
		  if(Copy_strPinConfig->copy_PinMode == GPIO_U8_INPUT_PULLUP)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	789b      	ldrb	r3, [r3, #2]
 8000ae2:	2b0c      	cmp	r3, #12
 8000ae4:	d126      	bne.n	8000b34 <GPIO_voidInit+0x288>
		  {
			GPIOB_U32_CRH_REG =(0x8<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	2208      	movs	r2, #8
 8000aee:	409a      	lsls	r2, r3
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <GPIO_voidInit+0x284>)
 8000af2:	601a      	str	r2, [r3, #0]
			Copy_strPinConfig->copy_u8pinNum  += 8;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	3308      	adds	r3, #8
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	705a      	strb	r2, [r3, #1]
            GPIOB_U32_BSRR_REG =(1<<Copy_strPinConfig->copy_u8pinNum); 			
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	785b      	ldrb	r3, [r3, #1]
 8000b04:	461a      	mov	r2, r3
 8000b06:	2301      	movs	r3, #1
 8000b08:	fa03 f202 	lsl.w	r2, r3, r2
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <GPIO_voidInit+0x274>)
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e01e      	b.n	8000b50 <GPIO_voidInit+0x2a4>
 8000b12:	bf00      	nop
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010810 	.word	0x40010810
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40010c10 	.word	0x40010c10
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011010 	.word	0x40011010
 8000b2c:	40010804 	.word	0x40010804
 8000b30:	40010c04 	.word	0x40010c04
		  }
		  else
		  {
			 GPIOB_U32_CRH_REG |=((Copy_strPinConfig->copy_PinMode)<<(Copy_strPinConfig->copy_u8pinNum)*4); 
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <GPIO_voidInit+0x338>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	7892      	ldrb	r2, [r2, #2]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7852      	ldrb	r2, [r2, #1]
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	fa01 f202 	lsl.w	r2, r1, r2
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <GPIO_voidInit+0x338>)
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6013      	str	r3, [r2, #0]
		  }
	
	  }
	  if(Copy_strPinConfig->copy_u8port ==GPIOC_U8_PORT)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d13d      	bne.n	8000bd4 <GPIO_voidInit+0x328>
	  {
		  GPIOC_U32_CRH_REG &=~ (0xf<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <GPIO_voidInit+0x33c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	7852      	ldrb	r2, [r2, #1]
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	210f      	movs	r1, #15
 8000b64:	fa01 f202 	lsl.w	r2, r1, r2
 8000b68:	43d2      	mvns	r2, r2
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <GPIO_voidInit+0x33c>)
 8000b6e:	400b      	ands	r3, r1
 8000b70:	6013      	str	r3, [r2, #0]
		  if(Copy_strPinConfig->copy_PinMode == GPIO_U8_INPUT_PULLUP)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	789b      	ldrb	r3, [r3, #2]
 8000b76:	2b0c      	cmp	r3, #12
 8000b78:	d11a      	bne.n	8000bb0 <GPIO_voidInit+0x304>
		  {
			GPIOC_U32_CRH_REG |=(0x8<<(Copy_strPinConfig->copy_u8pinNum)*4);
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <GPIO_voidInit+0x33c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	7852      	ldrb	r2, [r2, #1]
 8000b82:	0092      	lsls	r2, r2, #2
 8000b84:	2108      	movs	r1, #8
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <GPIO_voidInit+0x33c>)
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	6013      	str	r3, [r2, #0]
			Copy_strPinConfig->copy_u8pinNum  += 8;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	3308      	adds	r3, #8
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	705a      	strb	r2, [r3, #1]
            GPIOC_U32_BSRR_REG =(1<<Copy_strPinConfig->copy_u8pinNum); 			
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	fa03 f202 	lsl.w	r2, r3, r2
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <GPIO_voidInit+0x340>)
 8000bac:	601a      	str	r2, [r3, #0]
    if(Copy_strPinConfig->copy_u8pinNum<=GPIO_U8_PIN7)
 8000bae:	e011      	b.n	8000bd4 <GPIO_voidInit+0x328>
		  }
		  else
		  {
			 GPIOC_U32_CRH_REG |=((Copy_strPinConfig->copy_PinMode)<<(Copy_strPinConfig->copy_u8pinNum)*4); 
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <GPIO_voidInit+0x33c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7892      	ldrb	r2, [r2, #2]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	7852      	ldrb	r2, [r2, #1]
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <GPIO_voidInit+0x33c>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
    if(Copy_strPinConfig->copy_u8pinNum<=GPIO_U8_PIN7)
 8000bcc:	e002      	b.n	8000bd4 <GPIO_voidInit+0x328>
	}		
	  
 }
   else
	{
		local_statError =STD_TYPES_NOK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e000      	b.n	8000bd6 <GPIO_voidInit+0x32a>
    if(Copy_strPinConfig->copy_u8pinNum<=GPIO_U8_PIN7)
 8000bd4:	bf00      	nop
	}
	return local_statError;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
}    
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40010c04 	.word	0x40010c04
 8000be8:	40011004 	.word	0x40011004
 8000bec:	40011010 	.word	0x40011010

08000bf0 <GPIO_u8SetPinValue>:


u8   GPIO_u8SetPinValue(u8 copy_u8port,u8 copy_u8pinNum,u8 copy_u8Val)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	717b      	strb	r3, [r7, #5]
	u8 local_u8StatError  = STD_TYPES_OK;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
	if(copy_u8port <= GPIOC_U8_PORT && copy_u8pinNum <= GPIO_U8_PIN15 && copy_u8Val <= GPIO_U8_HIGH)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d844      	bhi.n	8000c96 <GPIO_u8SetPinValue+0xa6>
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b0f      	cmp	r3, #15
 8000c10:	d841      	bhi.n	8000c96 <GPIO_u8SetPinValue+0xa6>
 8000c12:	797b      	ldrb	r3, [r7, #5]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d83e      	bhi.n	8000c96 <GPIO_u8SetPinValue+0xa6>
	{
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d111      	bne.n	8000c42 <GPIO_u8SetPinValue+0x52>
	  {
		if(copy_u8Val == GPIO_U8_LOW)
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d105      	bne.n	8000c30 <GPIO_u8SetPinValue+0x40>
		{
			//copy_u8pinNum +=16;
			GPIOA_U32_ODR_REG = (1<<copy_u8pinNum);
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2201      	movs	r2, #1
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <GPIO_u8SetPinValue+0xbc>)
 8000c2c:	601a      	str	r2, [r3, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c2e:	e035      	b.n	8000c9c <GPIO_u8SetPinValue+0xac>
		}
        else if(copy_u8Val == GPIO_U8_HIGH)
 8000c30:	797b      	ldrb	r3, [r7, #5]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d132      	bne.n	8000c9c <GPIO_u8SetPinValue+0xac>
        {
		GPIOA_U32_ODR_REG = (1<<copy_u8pinNum);
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <GPIO_u8SetPinValue+0xbc>)
 8000c3e:	601a      	str	r2, [r3, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c40:	e02c      	b.n	8000c9c <GPIO_u8SetPinValue+0xac>
		}			
	  }
	  
	else if(copy_u8port == GPIOB_U8_PORT)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d111      	bne.n	8000c6c <GPIO_u8SetPinValue+0x7c>
	  {
		if(copy_u8Val == GPIO_U8_LOW)
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d105      	bne.n	8000c5a <GPIO_u8SetPinValue+0x6a>
		{
			//copy_u8pinNum +=16;
			GPIOB_U32_ODR_REG = (1<<copy_u8pinNum);
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2201      	movs	r2, #1
 8000c52:	409a      	lsls	r2, r3
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <GPIO_u8SetPinValue+0xc0>)
 8000c56:	601a      	str	r2, [r3, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c58:	e020      	b.n	8000c9c <GPIO_u8SetPinValue+0xac>
		}
        else if(copy_u8Val == GPIO_U8_HIGH)
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d11d      	bne.n	8000c9c <GPIO_u8SetPinValue+0xac>
        {
		GPIOB_U32_ODR_REG = (1<<copy_u8pinNum);
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	2201      	movs	r2, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <GPIO_u8SetPinValue+0xc0>)
 8000c68:	601a      	str	r2, [r3, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c6a:	e017      	b.n	8000c9c <GPIO_u8SetPinValue+0xac>
		}			
	  }
	  
	 else if(copy_u8port == GPIOC_U8_PORT)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d114      	bne.n	8000c9c <GPIO_u8SetPinValue+0xac>
	  {
		if(copy_u8Val == GPIO_U8_LOW)
 8000c72:	797b      	ldrb	r3, [r7, #5]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <GPIO_u8SetPinValue+0x94>
		{
			//copy_u8pinNum +=16;
			GPIOC_U32_ODR_REG = (1<<copy_u8pinNum);
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <GPIO_u8SetPinValue+0xc4>)
 8000c80:	601a      	str	r2, [r3, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c82:	e00b      	b.n	8000c9c <GPIO_u8SetPinValue+0xac>
		}
        else if(copy_u8Val == GPIO_U8_HIGH)
 8000c84:	797b      	ldrb	r3, [r7, #5]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d108      	bne.n	8000c9c <GPIO_u8SetPinValue+0xac>
        {
		GPIOC_U32_ODR_REG = (1<<copy_u8pinNum);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <GPIO_u8SetPinValue+0xc4>)
 8000c92:	601a      	str	r2, [r3, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c94:	e002      	b.n	8000c9c <GPIO_u8SetPinValue+0xac>
	  }

	}
	else
	{
		local_u8StatError  = STD_TYPES_NOK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e000      	b.n	8000c9e <GPIO_u8SetPinValue+0xae>
	  if(copy_u8port == GPIOA_U8_PORT)
 8000c9c:	bf00      	nop
	}
	return local_u8StatError;              
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	4001080c 	.word	0x4001080c
 8000cb0:	40010c0c 	.word	0x40010c0c
 8000cb4:	4001100c 	.word	0x4001100c

08000cb8 <GPIO_u8TogPin>:
	return local_u8StatError;	

}

u8   GPIO_u8TogPin  (u8 copy_u8port,u8 copy_u8pinNum)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	71bb      	strb	r3, [r7, #6]
	u8 local_u8StatError  = STD_TYPES_OK;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
	if(copy_u8port <= GPIOC_U8_PORT && copy_u8pinNum <= GPIO_U8_PIN15)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d82c      	bhi.n	8000d2c <GPIO_u8TogPin+0x74>
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d829      	bhi.n	8000d2c <GPIO_u8TogPin+0x74>
	{
	  if(copy_u8port == GPIOA_U8_PORT)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10a      	bne.n	8000cf4 <GPIO_u8TogPin+0x3c>
	  {
	   GPIOA_U32_ODR_REG ^=(1<<copy_u8pinNum);
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <GPIO_u8TogPin+0x88>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	4611      	mov	r1, r2
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <GPIO_u8TogPin+0x88>)
 8000cee:	404b      	eors	r3, r1
 8000cf0:	6013      	str	r3, [r2, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000cf2:	e01e      	b.n	8000d32 <GPIO_u8TogPin+0x7a>
	  }
	 else if(copy_u8port == GPIOB_U8_PORT)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10a      	bne.n	8000d10 <GPIO_u8TogPin+0x58>
	  {
	   GPIOB_U32_ODR_REG ^=(1<<copy_u8pinNum);
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <GPIO_u8TogPin+0x8c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	79ba      	ldrb	r2, [r7, #6]
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	4611      	mov	r1, r2
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <GPIO_u8TogPin+0x8c>)
 8000d0a:	404b      	eors	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000d0e:	e010      	b.n	8000d32 <GPIO_u8TogPin+0x7a>
	  }
	 else if(copy_u8port == GPIOC_U8_PORT)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d10d      	bne.n	8000d32 <GPIO_u8TogPin+0x7a>
	  {
	   GPIOC_U32_ODR_REG ^=(1<<copy_u8pinNum);
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <GPIO_u8TogPin+0x90>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	4611      	mov	r1, r2
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <GPIO_u8TogPin+0x90>)
 8000d26:	404b      	eors	r3, r1
 8000d28:	6013      	str	r3, [r2, #0]
	  if(copy_u8port == GPIOA_U8_PORT)
 8000d2a:	e002      	b.n	8000d32 <GPIO_u8TogPin+0x7a>
	  }
	}
	else
	{
		local_u8StatError  = STD_TYPES_NOK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e000      	b.n	8000d34 <GPIO_u8TogPin+0x7c>
	  if(copy_u8port == GPIOA_U8_PORT)
 8000d32:	bf00      	nop
	}
	return local_u8StatError;	
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 }
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	4001080c 	.word	0x4001080c
 8000d44:	40010c0c 	.word	0x40010c0c
 8000d48:	4001100c 	.word	0x4001100c

08000d4c <NVIC_u8EnableInterrupt>:
#include "NVIC_private.h"
#include "NVIC_interface.h"
#include "NVIC_config.h" 

void NVIC_u8EnableInterrupt(u8 copy_u8IRQ)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]

	u8 local_u8RegNum,local_u8BitNum;
	local_u8RegNum = copy_u8IRQ /32;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	73fb      	strb	r3, [r7, #15]
	local_u8BitNum =copy_u8IRQ%32;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	73bb      	strb	r3, [r7, #14]
	NVIC->ISER[local_u8RegNum]= (1<<local_u8BitNum);
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	2201      	movs	r2, #1
 8000d68:	fa02 f103 	lsl.w	r1, r2, r3
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <NVIC_u8EnableInterrupt+0x34>)
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <main>:
#include "NVIC_interface.h"
#include "GPIO_interface.h"
#include "CLK_interface.h"
void tog(void);
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
   RCC_u8EnPripheral(GPIO_U8_PORTA_CLK);
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff f9f0 	bl	8000170 <RCC_u8EnPripheral>

   RCC_u8EnPripheral(GPIO_U8_PORTC_CLK);
 8000d90:	2004      	movs	r0, #4
 8000d92:	f7ff f9ed 	bl	8000170 <RCC_u8EnPripheral>

   RCC_u8EnPripheral(ALT_FUN_U8_IO_CLK);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff f9ea 	bl	8000170 <RCC_u8EnPripheral>

   EXTI_voidCallBackFunEXTI0(&tog);
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <main+0x7c>)
 8000d9e:	f7ff fc13 	bl	80005c8 <EXTI_voidCallBackFunEXTI0>



   PIN_CINFIG pin = {GPIOA_U8_PORT,GPIO_U8_PIN0,GPIO_U8_INPUT_PULLDOWN};
 8000da2:	2300      	movs	r3, #0
 8000da4:	733b      	strb	r3, [r7, #12]
 8000da6:	2300      	movs	r3, #0
 8000da8:	737b      	strb	r3, [r7, #13]
 8000daa:	2308      	movs	r3, #8
 8000dac:	73bb      	strb	r3, [r7, #14]

   PIN_CINFIG pin1 = {GPIOC_U8_PORT,GPIO_U8_PIN13,GPIO_U8_OUTPUT_PUSH_PULL_10MHZ};
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <main+0x80>)
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	4611      	mov	r1, r2
 8000db8:	8019      	strh	r1, [r3, #0]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	0c12      	lsrs	r2, r2, #16
 8000dbe:	701a      	strb	r2, [r3, #0]

   EXT_PIN_CONFIG  pinx={PORTA,PIN0};
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	713b      	strb	r3, [r7, #4]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	717b      	strb	r3, [r7, #5]

   GPIO_voidInit(&pin);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fd6d 	bl	80008ac <GPIO_voidInit>
   GPIO_voidInit(&pin1);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fd68 	bl	80008ac <GPIO_voidInit>
   GPIO_u8SetPinValue(GPIOC_U8_PORT,GPIO_U8_PIN13,GPIO_U8_LOW);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	210d      	movs	r1, #13
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff ff05 	bl	8000bf0 <GPIO_u8SetPinValue>
   NVIC_u8EnableInterrupt(6);
 8000de6:	2006      	movs	r0, #6
 8000de8:	f7ff ffb0 	bl	8000d4c <NVIC_u8EnableInterrupt>
   EXTI_u8Init(&pinx);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fa08 	bl	8000204 <EXTI_u8Init>
   EXTI_u8Enable(EXTI0_U8_PRIF,EN_RISING_TRIGGER);
 8000df4:	2101      	movs	r1, #1
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fb8a 	bl	8000510 <EXTI_u8Enable>

	for(;;);
 8000dfc:	e7fe      	b.n	8000dfc <main+0x78>
 8000dfe:	bf00      	nop
 8000e00:	08000e09 	.word	0x08000e09
 8000e04:	08000ecc 	.word	0x08000ecc

08000e08 <tog>:

}

*/
void tog(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  GPIO_u8TogPin(GPIOC_U8_PORT, GPIO_U8_PIN13);
 8000e0c:	210d      	movs	r1, #13
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff ff52 	bl	8000cb8 <GPIO_u8TogPin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e46:	f000 f811 	bl	8000e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff ff9b 	bl	8000d84 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   r0, =_estack
 8000e50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e5c:	08000ed8 	.word	0x08000ed8
  ldr r2, =_sbss
 8000e60:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e64:	2000006c 	.word	0x2000006c

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <__libc_init_array>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	2500      	movs	r5, #0
 8000e70:	4e0c      	ldr	r6, [pc, #48]	; (8000ea4 <__libc_init_array+0x38>)
 8000e72:	4c0d      	ldr	r4, [pc, #52]	; (8000ea8 <__libc_init_array+0x3c>)
 8000e74:	1ba4      	subs	r4, r4, r6
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	d109      	bne.n	8000e90 <__libc_init_array+0x24>
 8000e7c:	f000 f81a 	bl	8000eb4 <_init>
 8000e80:	2500      	movs	r5, #0
 8000e82:	4e0a      	ldr	r6, [pc, #40]	; (8000eac <__libc_init_array+0x40>)
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <__libc_init_array+0x44>)
 8000e86:	1ba4      	subs	r4, r4, r6
 8000e88:	10a4      	asrs	r4, r4, #2
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	d105      	bne.n	8000e9a <__libc_init_array+0x2e>
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
 8000e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e94:	4798      	blx	r3
 8000e96:	3501      	adds	r5, #1
 8000e98:	e7ee      	b.n	8000e78 <__libc_init_array+0xc>
 8000e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e9e:	4798      	blx	r3
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	e7f2      	b.n	8000e8a <__libc_init_array+0x1e>
 8000ea4:	08000ed0 	.word	0x08000ed0
 8000ea8:	08000ed0 	.word	0x08000ed0
 8000eac:	08000ed0 	.word	0x08000ed0
 8000eb0:	08000ed4 	.word	0x08000ed4

08000eb4 <_init>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	bf00      	nop
 8000eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eba:	bc08      	pop	{r3}
 8000ebc:	469e      	mov	lr, r3
 8000ebe:	4770      	bx	lr

08000ec0 <_fini>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr
