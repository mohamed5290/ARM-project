
TASK_INVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000368  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000368  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000418  00000000  00000000  00010391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001a7  00000000  00000000  000107a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00010950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001191  00000000  00000000  00010a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000060e  00000000  00000000  00011c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004c7b  00000000  00000000  00012217  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016e92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b4  00000000  00000000  00016f10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000348 	.word	0x08000348

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000348 	.word	0x08000348

08000170 <NVIC_u8EnableInterrupt>:
#include "NVIC_private.h"
#include "NVIC_interface.h"
#include "NVIC_config.h" 

void NVIC_u8EnableInterrupt(u8 copy_u8IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]

	u8 local_u8RegNum,local_u8BitNum;
	local_u8RegNum = copy_u8IRQ /32;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	095b      	lsrs	r3, r3, #5
 800017e:	73fb      	strb	r3, [r7, #15]
	local_u8BitNum =copy_u8IRQ%32;
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	f003 031f 	and.w	r3, r3, #31
 8000186:	73bb      	strb	r3, [r7, #14]
	NVIC->ISER[local_u8RegNum]= (1<<local_u8BitNum);
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	2201      	movs	r2, #1
 800018c:	fa02 f103 	lsl.w	r1, r2, r3
 8000190:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <NVIC_u8EnableInterrupt+0x34>)
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000198:	bf00      	nop
 800019a:	3714      	adds	r7, #20
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <NVIC_u8u8Setpending>:
	local_u8BitNum =copy_u8IRQ%32;
	NVIC->ICER[local_u8RegNum]= (1<<local_u8BitNum);
}

void NVIC_u8u8Setpending(u8 copy_u8IRQ)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	71fb      	strb	r3, [r7, #7]
	u8 local_u8RegNum,local_u8BitNum;
	local_u8RegNum = copy_u8IRQ /32;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	095b      	lsrs	r3, r3, #5
 80001b6:	73fb      	strb	r3, [r7, #15]
	local_u8BitNum =copy_u8IRQ%32;
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	f003 031f 	and.w	r3, r3, #31
 80001be:	73bb      	strb	r3, [r7, #14]
	NVIC->ISPR[local_u8RegNum]= (1<<local_u8BitNum);
 80001c0:	7bbb      	ldrb	r3, [r7, #14]
 80001c2:	2201      	movs	r2, #1
 80001c4:	fa02 f103 	lsl.w	r1, r2, r3
 80001c8:	4a04      	ldr	r2, [pc, #16]	; (80001dc <NVIC_u8u8Setpending+0x34>)
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	3340      	adds	r3, #64	; 0x40
 80001ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	e000e100 	.word	0xe000e100

080001e0 <SCB_u8InitPriortyField>:
   return local_u8state;
}


u8 SCB_u8InitPriortyField(u32 copy_u8NumBitGroupAndSubPriorty)
{ 
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
   u8 local_u8state = STD_TYPES_OK;
 80001e8:	2301      	movs	r3, #1
 80001ea:	73fb      	strb	r3, [r7, #15]
   if((copy_u8NumBitGroupAndSubPriorty<BIT0_SUB_4BIT_GROUP) && (copy_u8NumBitGroupAndSubPriorty > BIT4_SUB_0BIT_GROUP))
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <SCB_u8InitPriortyField+0x34>)
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d807      	bhi.n	8000204 <SCB_u8InitPriortyField+0x24>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a08      	ldr	r2, [pc, #32]	; (8000218 <SCB_u8InitPriortyField+0x38>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d903      	bls.n	8000204 <SCB_u8InitPriortyField+0x24>
   {
   NVIC_AIRCR_REG =	copy_u8NumBitGroupAndSubPriorty;
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <SCB_u8InitPriortyField+0x3c>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	e001      	b.n	8000208 <SCB_u8InitPriortyField+0x28>
   }
   else 
   {
	 local_u8state = STD_TYPES_NOK;  
 8000204:	2300      	movs	r3, #0
 8000206:	73fb      	strb	r3, [r7, #15]
   }
   return local_u8state;
 8000208:	7bfb      	ldrb	r3, [r7, #15]
}
 800020a:	4618      	mov	r0, r3
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	05fa02ff 	.word	0x05fa02ff
 8000218:	05fa0700 	.word	0x05fa0700
 800021c:	e000ed0c 	.word	0xe000ed0c

08000220 <NVIC_u8Setpriorty>:
void NVIC_u8Setpriorty(u8 copy_u8IRQNum,u8 copy_u8GroupPriorty,u8 copy_u8SubPriorty)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]
 800022a:	460b      	mov	r3, r1
 800022c:	71bb      	strb	r3, [r7, #6]
 800022e:	4613      	mov	r3, r2
 8000230:	717b      	strb	r3, [r7, #5]

	NVIC->IPR[copy_u8IRQNum]= (copy_u8GroupPriorty<<6)|(copy_u8SubPriorty<<4);	
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	019b      	lsls	r3, r3, #6
 8000236:	b25a      	sxtb	r2, r3
 8000238:	797b      	ldrb	r3, [r7, #5]
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	b25b      	sxtb	r3, r3
 800023e:	4313      	orrs	r3, r2
 8000240:	b259      	sxtb	r1, r3
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <NVIC_u8Setpriorty+0x3c>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	b2c9      	uxtb	r1, r1
 8000248:	4413      	add	r3, r2
 800024a:	460a      	mov	r2, r1
 800024c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	
	
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000e100 	.word	0xe000e100

08000260 <main>:
#include "NVIC_interface.h"
#include <stdint.h>


int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	SCB_u8InitPriortyField(BIT2_SUB_2BIT_GROUP);
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <main+0x34>)
 8000266:	f7ff ffbb 	bl	80001e0 <SCB_u8InitPriortyField>

	NVIC_u8Setpriorty(35,  GROUP_U8_PRIORITY_TWO  ,SUB_U8_PRIORITY_ONE);
 800026a:	2201      	movs	r2, #1
 800026c:	2102      	movs	r1, #2
 800026e:	2023      	movs	r0, #35	; 0x23
 8000270:	f7ff ffd6 	bl	8000220 <NVIC_u8Setpriorty>

	NVIC_u8Setpriorty(6, GROUP_U8_PRIORITY_TWO  ,SUB_U8_PRIORITY_THREE);
 8000274:	2203      	movs	r2, #3
 8000276:	2102      	movs	r1, #2
 8000278:	2006      	movs	r0, #6
 800027a:	f7ff ffd1 	bl	8000220 <NVIC_u8Setpriorty>

	NVIC_u8EnableInterrupt(6);
 800027e:	2006      	movs	r0, #6
 8000280:	f7ff ff76 	bl	8000170 <NVIC_u8EnableInterrupt>

	NVIC_u8EnableInterrupt(35);
 8000284:	2023      	movs	r0, #35	; 0x23
 8000286:	f7ff ff73 	bl	8000170 <NVIC_u8EnableInterrupt>

	NVIC_u8u8Setpending(6);
 800028a:	2006      	movs	r0, #6
 800028c:	f7ff ff8c 	bl	80001a8 <NVIC_u8u8Setpending>

	for(;;);
 8000290:	e7fe      	b.n	8000290 <main+0x30>
 8000292:	bf00      	nop
 8000294:	05fa0500 	.word	0x05fa0500

08000298 <EXTI0_IRQHandler>:
}

/* IRQ = 6 */
void EXTI0_IRQHandler(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	NVIC_u8u8Setpending(35);
 800029c:	2023      	movs	r0, #35	; 0x23
 800029e:	f7ff ff83 	bl	80001a8 <NVIC_u8u8Setpending>
    while(1);
 80002a2:	e7fe      	b.n	80002a2 <EXTI0_IRQHandler+0xa>

080002a4 <SPI1_IRQHandler>:
}

/* IRQ = 35 */
void SPI1_IRQHandler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

 while(1);
 80002a8:	e7fe      	b.n	80002a8 <SPI1_IRQHandler+0x4>
	...

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ffbf 	bl	8000260 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	2500      	movs	r5, #0
 8000304:	4e0c      	ldr	r6, [pc, #48]	; (8000338 <__libc_init_array+0x38>)
 8000306:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000308:	1ba4      	subs	r4, r4, r6
 800030a:	10a4      	asrs	r4, r4, #2
 800030c:	42a5      	cmp	r5, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	f000 f81a 	bl	8000348 <_init>
 8000314:	2500      	movs	r5, #0
 8000316:	4e0a      	ldr	r6, [pc, #40]	; (8000340 <__libc_init_array+0x40>)
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <__libc_init_array+0x44>)
 800031a:	1ba4      	subs	r4, r4, r6
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	42a5      	cmp	r5, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000328:	4798      	blx	r3
 800032a:	3501      	adds	r5, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000332:	4798      	blx	r3
 8000334:	3501      	adds	r5, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
